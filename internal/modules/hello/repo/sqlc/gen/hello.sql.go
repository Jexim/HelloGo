// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: hello.sql

package gen

import (
	"context"
)

const createHello = `-- name: CreateHello :one
INSERT INTO hello (message)
VALUES ($1)
RETURNING id, message
`

func (q *Queries) CreateHello(ctx context.Context, message string) (Hello, error) {
	row := q.db.QueryRowContext(ctx, createHello, message)
	var i Hello
	err := row.Scan(&i.ID, &i.Message)
	return i, err
}

const deleteHello = `-- name: DeleteHello :exec
DELETE FROM hello
WHERE id = $1
`

func (q *Queries) DeleteHello(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteHello, id)
	return err
}

const getHello = `-- name: GetHello :one
SELECT id, message
FROM hello
WHERE id = $1
`

func (q *Queries) GetHello(ctx context.Context, id int32) (Hello, error) {
	row := q.db.QueryRowContext(ctx, getHello, id)
	var i Hello
	err := row.Scan(&i.ID, &i.Message)
	return i, err
}

const listHellos = `-- name: ListHellos :many
SELECT id, message
FROM hello
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListHellosParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListHellos(ctx context.Context, arg ListHellosParams) ([]Hello, error) {
	rows, err := q.db.QueryContext(ctx, listHellos, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Hello
	for rows.Next() {
		var i Hello
		if err := rows.Scan(&i.ID, &i.Message); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHello = `-- name: UpdateHello :exec
UPDATE hello
SET message = $1
WHERE id = $2
`

type UpdateHelloParams struct {
	Message string `json:"message"`
	ID      int32  `json:"id"`
}

func (q *Queries) UpdateHello(ctx context.Context, arg UpdateHelloParams) error {
	_, err := q.db.ExecContext(ctx, updateHello, arg.Message, arg.ID)
	return err
}
